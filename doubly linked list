// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class node{
   public: 
    int data;
    node* next;
    node* pre;
    //constructor:------
    node(int d){
        this->data=d;
        this->next=NULL;
        this->pre=NULL;
        
    }
};
void insertatfirst(node* &head, int d){
    node* temp=new node(d);
    temp->next=head;
    head=temp;
}
void deletenode(int post, node* &head){
    if(post==1){
        node* temp=head;
        head=head->next;
    }
    else{
        node* curr=head;
        node* pre=NULL;
        int cnt=1;
        while(cnt<post){
            pre=curr;
            curr=curr->next;
            cnt++;
        }
    pre->next=curr->next;
    curr->next=NULL;
    delete curr;
    }
}

void insertatposition(node* &head,int post,int d){
    node* temp=head;
    int cnt=1;
    while(cnt<post-1){
        temp=temp->next;
        cnt++;
    }
    node* newnode=new node(d);
    newnode->next=temp->next;
    temp->next=newnode;
}
void printll(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
void doublelinkedlist(node* &head,int pos, int d){
    node* temp=head;
    int cnt=1;
    while(cnt<pos-1){
        temp=temp->next;
        cnt++;
    }
    node* newnode=new node(d);
    newnode->next=temp->next;
    temp->next->pre=newnode;
    temp->next=newnode;
    newnode->pre=temp;
}
int findmid(node* &head){
    node* temp=head;
    int cnt=0;
    while(temp!=NULL){
        temp=temp->next;
        cnt++;
    }
    return cnt;
    
    
}
// void deleteatposition(node* &head,int pos){
//     node* temp=head;
//     int cnt=1;
//     while(cnt<pos-1 && temp!=NULL){
//         temp=temp->next;
//         cnt++;
//     }
//     temp->next->pre=NULL;
//     head=temp->next;
//     temp->next=NULL;
//     delete temp;
// }
int main() {
    node* head=NULL;
    insertatfirst(head,12);
    insertatfirst(head,120);
    insertatfirst(head,1200);
    insertatfirst(head,120000);
    printll(head);
    cout<<endl<<"insertatanyposition: ";
    insertatposition(head,2,45);
    printll(head);
    cout<<endl;
    deletenode(2,head);
    printll(head);
    cout<<endl;
    doublelinkedlist(head,2,100);
    cout<<"double linked list insertion at any point"<<endl;
    printll(head);
    cout<<endl;
    
    //find mid point
    
    int cnt=findmid(head);
    int post=cnt/2;
    node* temp=head;
    for(int i=1; i<=post; i++){
        temp=temp->next;
    }
    cout<<temp->data;
    // deleteatposition(head,2);
    // printll(head);
    
}
